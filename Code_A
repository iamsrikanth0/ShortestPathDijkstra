import java.util.*;


public class Short {
    static class Edge{
        int src;
        int dst;
        int wt;

      public  Edge(int s, int d, int w){
            this.src = s;
            this.dst = d;
            this.wt = w;
        }
    }

    public static void creatingAGraphs( ArrayList<Edge> graph[]){
        //Creating empty arraylist fron Null arraylist
        for(int i=0; i<graph.length; i++){
            graph[i]= new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 1,2));
        graph[0].add(new Edge(0, 2,4));
    
            graph[1].add(new Edge(1, 0,7));
            graph[1].add(new Edge(1, 3, 1));
    
            graph[2].add(new Edge(2, 0,8));
            graph[2].add(new Edge(2, 4, 5));
    
            
            graph[3].add(new Edge(3, 1,3));
            graph[3].add(new Edge(3, 4,4));
            graph[3].add(new Edge(3, 5,6 ));
            
            graph[4].add(new Edge(4, 2,4));
            graph[4].add(new Edge(4, 3, 3));
            graph[4].add(new Edge(4, 5,2 ));
    
            graph[5].add(new Edge(5, 3,1 ));
            graph[5].add(new Edge(5, 4.2 ));
            graph[5].add(new Edge(5, 6,5));
    
            graph[6].add(new Edge(6, 5,3));
    }

    //for creating a Priotiry Queue based on distance
    public static class Pair implements Comparable<Pair>{
        int node;
        int dist;
        public Pair (int n, int d){
            this.node = n;
            this.dist = d;
        }
        @Override
        public int compareTo(Pair p2){
            return this.dist - p2.dist; //for asceending
            //Ade descending authe >> return  p2.dist - this.dist 
        }
    }

    public static void dijkstra(ArrayList<Edge> graph[], int src, int V){
        PriorityQueue<Pair> pq = new PriorityQueu<>();
        int dist[] = new int[V];
        // Initialize all distances to Max value xpct the source(starting point)
        for(int i=0, i< V; i++){
            if(i!=src){
                dist[i]= Integer.MAX_VALUE;
            }
        }
        boolean vis[] = new boolean[V];

        pq.add(new Pair(0,0));

        //Intialization done

        //Now logic
        while(!pq.isEmpty()){
            Pair curr = pq.remove(); //shortest
            if (!vis[curr.node]){
                vis[curr.node]= true;

                for(int i=0; i<graph[curr.node].size(); i++){
                 Edge e = graph[curr.node].get(i);
                 int u = e.src;
                 int v = e.dst;

                 if (dist[u]+ e.wt < dist[v]){
                    dist[v] = dist[u]+ e.wt;
                 }
                }
            }

        }

         for (int i=0; i<V; i++){
            Sytem.out.print(dist[i]+ " ");
         }


    }

    public static void main(String args[]){
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        creatingAGraphs(graph);

        dijkstra(grpah, 0, V);
    }
}
